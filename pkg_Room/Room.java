package pkg_Room;import pkg_Item.ItemList;import pkg_Item.Item;import pkg_Character.CharacteresList;import pkg_Character.Characteres;import java.util.Set;import java.util.HashMap;import java.util.Iterator;import java.util.HashMap;/** * Class Room - a room in an adventure game. * * This class is part of the "World of Zuul" application.  * "World of Zuul" is a very simple, text based adventure game.   * * A "Room" represents one location in the scenery of the game.  It is  * connected to other rooms via exits.  For each existing exit, the room  * stores a reference to the neighboring room. *  * @author  Michael Kolling and David J. Barnes * @version 1.0 (February 2002) DBMOD:04/04/2008 */public class Room {    private String aDescription;    private HashMap<String,Room> exits;// stores exits of this room.    private ItemList aItems;    private CharacteresList aChars;    private String imageName;    /**     * Create a room described "description" with a given image.      * Initially, it has no exits. "description" is something like      * "in a kitchen" or "in an open court yard".     */    public Room(final String description,final String image,final Item pItem, final Characteres pCha)     {        this.aDescription = description;        this.exits = new HashMap<String,Room>();        this.imageName = image;        this.aItems = new ItemList();        this.aChars = new CharacteresList();    }//Room()    /**     * Define an exit from this room.     */    public void setExit(final String direction,final Room neighbor)     {        exits.put(direction, neighbor);    }//setExit()    /**     * Return the description of the room (the one that was defined in the     * constructor).     */    public String getShortDescription()    {        return this.aDescription;    }//getShortDescription()    /**     * Return a long description of this room, in the form:     *     You are in the kitchen.     *     Exits: north west     */    public String getLongDescription()    {        String vString = "Vous êtes " + this.aDescription + ".\n" + this.getExitString() + "\n";        if (aItems != null) vString += "Item :" + this.aItems.getItemsString();        if(! aChars.isEmpty()) vString += "Personnage : " + this.aChars.getCharactereString();        if(aChars.isEmpty()) vString += "Il n'y a aucun personnage dans la pièce.";        return vString;    }//getLongDescription()    /**     * Return a string describing the room's exits, for example     * "Exits: north west".     */    private String getExitString()    {        StringBuilder returnString = new StringBuilder( "Exits: \n" );        for ( String vS : exits.keySet() )            returnString.append( " " + vS + "\n");        return returnString.toString();    }//getExitString()    /**     * Return the room that is reached if we go from this room in direction     * "direction". If there is no room in that direction, return null.     */    public Room getExit(final String direction)     {        return this.exits.get(direction);    }//getExit()    /**     * Return a string describing the room's image name     */    public String getImageName()    {        return this.imageName;    }//getImageName()    public ItemList getItemList()    {        return this.aItems;    }        public CharacteresList getChaList()    {        return this.aChars;    }        public Item getChaItem()    {        return Characteres.getChaItem();    }    //     public String getNom()//     {//         return Characteres.getNom();//     }        public String getDirection(Room pRoom)    {        String direction = null;        for (String key : exits.keySet())        {            if (pRoom.equals(exits.get(key)))            {                direction = key;                break;            }        }        return direction;    }        public Item get(final String pN)    {        return this.aItems.get(pN);     }}//class Room